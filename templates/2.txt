std::nullopt_t redirect_to_collection(
	std::shared_ptr<bserv::db_connection> conn,
	std::shared_ptr<bserv::session_type> session_ptr,
	bserv::response_type& response,
	int page_id,
	boost::json::object&& context,
	boost::json::object&& params) {
	lgdebug << "view users: " << page_id << std::endl;

	bserv::db_transaction tx{ conn };
	bserv::db_result db_res = tx.exec("select count(*) from collection;");
	lginfo << db_res.query();
	std::size_t total_users = (*db_res.begin())[0].as<std::size_t>();
	lgdebug << "total users: " << total_users << std::endl;
	int total_pages = (int)total_users / 10;
	if (total_users % 10 != 0) ++total_pages;
	lgdebug << "total pages: " << total_pages << std::endl;
	bserv::session_type& session = *session_ptr;
	db_res = tx.exec("select mname,sname,uname,freq,is_favorite from collection,music where mname=musicname and uname=? order by freq desc limit 10 offset ?;", params["setuser"].as_string(), (page_id - 1) * 10);
	lginfo << db_res.query();
	auto collections = orm_collection.convert_to_vector(db_res);
	boost::json::array json_collections;
	for (auto& collection : collections) {
		json_collections.push_back(collection);
	}
	
	boost::json::object pagination;
	if (total_pages != 0) {
		pagination["total"] = total_pages;
		if (page_id > 1) {
			pagination["previous"] = page_id - 1;
		}
		if (page_id < total_pages) {
			pagination["next"] = page_id + 1;
		}
		int lower = page_id - 3;
		int upper = page_id + 3;
		if (page_id - 3 > 2) {
			pagination["left_ellipsis"] = true;
		}
		else {
			lower = 1;
		}
		if (page_id + 3 < total_pages - 1) {
			pagination["right_ellipsis"] = true;
		}
		else {
			upper = total_pages;
		}
		pagination["current"] = page_id;
		boost::json::array pages_left;
		for (int i = lower; i < page_id; ++i) {
			pages_left.push_back(i);
		}
		pagination["pages_left"] = pages_left;
		boost::json::array pages_right;
		for (int i = page_id + 1; i <= upper; ++i) {
			pages_right.push_back(i);
		}
		pagination["pages_right"] = pages_right;
		context["pagination"] = pagination;
	}
	context["collections"] = json_collections;
	return index("collection.html", session_ptr, response, context);
}